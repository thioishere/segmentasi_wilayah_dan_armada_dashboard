import os

# Buat folder output jika belum ada
os.makedirs("output", exist_ok=True)



# # -*- coding: utf-8 -*-
# """segmentasi_dan_jumlah_armada

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1Ldk7dd3y4YKHjiF_-pRrvED2tZdpU9-U
# """

# import pandas as pd
# import numpy as np
# import matplotlib.pyplot as plt
# import seaborn as sns


# dataset = pd.read_excel("data/data_clustering.xlsx")

# dataset.head()

# #membuat rata-rata data tahun 2020-2023
# import pandas as pd
# #Tentukan kolom yang tidak perlu dirata-rata
# columns_to_exclude = ['tahun']
# #Tentukan kolom pengelompokan (identitas)
# group_cols = ['kode_kabupaten_kota', 'nama_kabupaten_kota']
# #Pilih kolom numerik yang akan dirata-ratakan
# columns_to_average = [col for col in dataset.columns if col not in group_cols + columns_to_exclude]
# #Hitung rata-rata per kabupaten/kota
# dataset_avg = dataset.groupby(group_cols)[columns_to_average].mean().reset_index()
# #Tampilkan 5 baris pertama sebagai preview
# dataset_avg.head()

# dataset_avg

# #drop atau hapus kolom yang tidak digunakan
# X = dataset_avg.drop(["kode_kabupaten_kota","nama_kabupaten_kota","jumlah_produksi_sampah","jumlah penduduk"], axis=1)
# X.head()

# # Ukuran data (kolom, baris)
# X.shape

# # Cek data missing
# X.isnull().sum()

# # Ringkasan data
# X.describe()

# """K-MEANS CLUSTERING"""

# from sklearn.cluster import KMeans

# # Berapa cluster-nya
# # KMeans(n_clusters = 2).fit(X).score(X)

# # # Penilaian, melihat distribusinya efisien atau tidak
# # # Menggunakan Score
# # scr = []

# # for i in range(1, 15):
# #     score = KMeans(n_clusters = i, random_state = 14).fit(X).score(X)
# #     scr.append(round(score, 2))

# # Menggunakan Score
# # plt.plot(range(1, 15), scr)
# # plt.title("The Score Efficient")
# # plt.xlabel("Number of Clusters")
# # plt.ylabel("Score")
# # plt.show()

# # Ambil nilai yang ada di patahannya (belokannya)
# # Kira2 ambil cluster = 3

# #Elbow Method
# wcss = [] # wcss -> Within Cluster Sum of Squares

# for i in range(1, 15):
#     kmeans = KMeans(n_clusters = i, random_state = 14)
#     kmeans.fit(X)
#     wcss.append(kmeans.inertia_)

# # Cara lain (menggunakan Elbow Method)
# plt.plot(range(1, 15), wcss)
# plt.title("The Elbow Method")
# plt.xlabel("Number of Clusters")
# plt.ylabel("WCSS")
# plt.savefig("output/elbow_method.png", bbox_inches="tight")
# plt.close()

# # Pakai cluster = 3
# kmeans = KMeans(n_clusters = 3, random_state = 14)
# kmeans.fit(X)

# # Cara lain untuk melihat hasil cluster
# y_pred = kmeans.fit_predict(X)

# kmeans.labels_

# hasil_kmeans = dataset_avg.copy()
# hasil_kmeans['cluster'] = kmeans.labels_
# hasil_kmeans

# hasil_kmeans[['nama_kabupaten_kota', 'cluster']]

# cluster_count = hasil_kmeans['cluster'].value_counts().reset_index()
# cluster_count.columns = ['Cluster', 'Jumlah Anggota']
# cluster_count = cluster_count.sort_values('Cluster')
# print(cluster_count)

# hasil_kmeans[hasil_kmeans['cluster'] == 0][['nama_kabupaten_kota','cluster']]

# hasil_kmeans[hasil_kmeans['cluster'] == 1][['nama_kabupaten_kota','cluster']]

# hasil_kmeans[hasil_kmeans['cluster'] == 2][['nama_kabupaten_kota','cluster']]

# """Visualisasi Hasil Clustering (K-Means)"""

# cluster_x = hasil_kmeans["cluster"].value_counts().index
# cluster_y = hasil_kmeans["cluster"].value_counts().values

# sns.barplot(x=cluster_x, y=cluster_y, hue = cluster_x)
# plt.title("Frekuensi Data pada Masing-Masing Cluster (KMeans)")
# plt.xlabel("Cluster")
# plt.ylabel("Frekuensi")
# plt.savefig("output/Frekuensi Data pada Masing-Masing Cluster (KMeans).png", bbox_inches="tight")
# plt.close()

# sns.pairplot(hasil_kmeans, hue = "cluster")

# # Nilai fitur/variabel dari masing-masing cluster
# ann_kmeans0 = hasil_kmeans[hasil_kmeans["cluster"] == 0].iloc[:, 0]
# spend_kmeans0 = hasil_kmeans[hasil_kmeans["cluster"] == 0].iloc[:, 1]

# ann_kmeans1 = hasil_kmeans[hasil_kmeans["cluster"] == 1].iloc[:, 0]
# spend_kmeans1 = hasil_kmeans[hasil_kmeans["cluster"] == 1].iloc[:, 1]

# ann_kmeans2 = hasil_kmeans[hasil_kmeans["cluster"] == 2].iloc[:, 0]
# spend_kmeans2 = hasil_kmeans[hasil_kmeans["cluster"] == 2].iloc[:, 1]

# # Pusat dari cluster (centroid)
# centroid_cluster = kmeans.cluster_centers_
# centroid_cluster

# #visualisasi dengan PCA

# from sklearn.decomposition import PCA

# # Lakukan PCA ke 2 komponen
# pca = PCA(n_components=2)
# X_pca = pca.fit_transform(X)

# # Tambahkan ke dataframe hasil_kmeans
# hasil_kmeans['PCA1'] = X_pca[:, 0]
# hasil_kmeans['PCA2'] = X_pca[:, 1]

# # Visualisasikan hasil cluster
# plt.figure(figsize=(8, 6))
# colors = ['blue', 'orange', 'green']
# for cluster_id in sorted(hasil_kmeans['cluster'].unique()):
#     cluster_data = hasil_kmeans[hasil_kmeans['cluster'] == cluster_id]
#     plt.scatter(cluster_data['PCA1'], cluster_data['PCA2'],
#                 s=80, label=f'Cluster {cluster_id}', c=colors[cluster_id])

# # Centroid juga ditransformasi ke ruang PCA
# centroid_pca = pca.transform(centroid_cluster)
# plt.scatter(centroid_pca[:, 0], centroid_pca[:, 1],
#             s=160, c='black', label='Centroids', marker='X')

# plt.title("Visualisasi Cluster Wilayah (PCA)")
# plt.xlabel("PCA 1")
# plt.ylabel("PCA 2")
# plt.legend()
# plt.grid(True)
# plt.savefig("output/Visualisasi Cluster Wilayah (PCA).png", bbox_inches="tight")
# plt.close()

# pd.DataFrame(pca.components_, columns=X.columns, index=['PCA1', 'PCA2'])

# """Karakteristik Tiap Cluster"""

# #menggunakan box plot
# import seaborn as sns
# import matplotlib.pyplot as plt

# fitur = ['kepadatan_penduduk', 'pdrb_adhk_per_kapita',
#          'persentase_pelayanan', 'persentase_sampah_ditangani',
#          'luas_wilayah']

# for kolom in fitur:
#     plt.figure(figsize=(8, 4))
#     sns.boxplot(x='cluster', y=kolom, data=hasil_kmeans, palette='Set2')
#     plt.title(f'Distribusi {kolom} per Cluster')
#     plt.xlabel('Cluster')
#     plt.ylabel(kolom)
#     plt.tight_layout()
#     # plt.show()
#     plt.savefig("output/f'Distribusi {kolom} per Cluster'.png", bbox_inches="tight")
#     plt.close()

    

# #hasil rata rata tiap cluster di setiap variabel
# hasil_kmeans.groupby('cluster')[fitur].mean().round(2)

# """Intrepetasi dari setiap cluster

# - Cluster 0: kepadatan pddk = tinggi, pdrb = sedang, persentase pelayanan = sedang, persentase sampah ditangani = sedang (tertinggi diantara semua cluster), luas wilayah = kecil

# - Cluster 1: kepadatan pddk = rendah, pdrb = kecil, persentase pelayanan = sedang, persentase sampah ditangani = sedang (terkecil diantara semua cluster), luas wilayah = tinggi

# - Cluster 2: kepadatan pddk = tinggi, pdrb = tinggi, persentase pelayanan = sedang, persentase sampah ditangani = sedang, luas wilayah = sedang

# Rekomendasi Solusi untuk Cluster
# """


# # Ambil rata-rata per cluster
# mean_per_cluster = hasil_kmeans.groupby("cluster")[[
#     "kepadatan_penduduk",
#     "pdrb_adhk_per_kapita",
#     "persentase_pelayanan",
#     "persentase_sampah_ditangani",
#     "luas_wilayah"
# ]].mean()

# # Simpan deskripsi solusi
# solusi_clusters = {}

# # Untuk tiap cluster
# for cluster_id, row in mean_per_cluster.iterrows():
#     solusi = f"ðŸ”· Rekomendasi untuk Cluster {cluster_id}:\n"

#     # Karakteristik umum
#     if row['kepadatan_penduduk'] > mean_per_cluster['kepadatan_penduduk'].mean():
#         solusi += "- Wilayah padat penduduk. Tingkatkan efisiensi armada dan pengumpulan sampah.\n"
#     else:
#         solusi += "- Kepadatan rendah. Fokus pada aksesibilitas layanan di area luas.\n"

#     if row['pdrb_adhk_per_kapita'] > mean_per_cluster['pdrb_adhk_per_kapita'].mean():
#         solusi += "- Ekonomi wilayah tinggi. Dorong kebijakan pengelolaan sampah berbasis teknologi & industri daur ulang.\n"
#     else:
#         solusi += "- Ekonomi wilayah masih rendah. Berikan dukungan anggaran dan penyuluhan masyarakat.\n"

#     if row['persentase_pelayanan'] < 75:
#         solusi += "- Pelayanan sampah masih rendah. Perluasan cakupan layanan harus menjadi prioritas.\n"
#     else:
#         solusi += "- Pelayanan sampah cukup baik. Fokus pada peningkatan kualitas pelayanan.\n"

#     if row['persentase_sampah_ditangani'] < 0.4:
#         solusi += "- Penanganan sampah belum optimal. Investasi infrastruktur TPS/TPA ramah lingkungan diperlukan.\n"
#     else:
#         solusi += "- Penanganan sampah cukup baik. Lanjutkan dengan penguatan program daur ulang dan edukasi warga.\n"

#     if row['luas_wilayah'] > mean_per_cluster['luas_wilayah'].mean():
#         solusi += "- Wilayah luas. Gunakan teknologi seperti GPS dan pemetaan untuk perencanaan pengangkutan.\n"
#     else:
#         solusi += "- Wilayah kecil. Penjadwalan pengangkutan bisa dibuat lebih sering dan fleksibel.\n"

#     solusi_clusters[cluster_id] = solusi

# # Tampilkan rekomendasi untuk semua cluster
# for cluster, rekomendasi in solusi_clusters.items():
#     print(rekomendasi)
#     print("-" * 60)



# """# JUMLAH ARMADA IDEAL

# """



# import pandas as pd
# import numpy as np

# df = pd.read_excel("data/Armada Ideal.xlsx")

# df.head()

# # prompt: menghapus data agar yang ditampilkan atau digunakan di df adalaha "Tahun" = 2023

# df = df[df['Tahun'] == 2023].copy()

# # Ukuran data (kolom, baris)
# df.shape

# # Cek data missing
# df.isnull().sum()

# # Ringkasan data
# df.describe()

# # Ubah kolom numerik menjadi float
# numeric_cols = [
#     'jumlah_produksi_sampah',
#     'jumlah sampah yang ditangani',
#     'Armroll',
#     'Truk Sampah',
#     'Dumptruck'
# ]
# df[numeric_cols] = df[numeric_cols].astype(float)

# df

# """Analisis Jumlah Armada Ideal"""

# # Parameter Menghitung Volume Timbulan Sampah
# #yang Mampu Diangkut Tiap Armada (ton/hari/unit)

# kapasitas_armada = 10

# densitas_sampah ={
#     "Armroll": 0.75,
#     "Compactor Truck": 0.75,
#     "Dump Truck": 0.45
# }

# ritasi_per_hari = 3


# # kapasitas = {
# #     "Armroll": 22.5,
# #     "Compactor Truck": 22.5,
# #     "Dump Truck": 13.5
# # }

# persen_pelayanan_armada = {
#     "Armroll": 0.25,
#     "Compactor Truck": 0.35,
#     "Dump Truck": 0.40
# }

# # Hitung volume sampah yang mampu diangkut tiap jenis armada (ton/hari/unit)
# volume_sampah_yang_diangkut = {
#     jenis: kapasitas_armada * densitas * ritasi_per_hari
#     for jenis, densitas in densitas_sampah.items()
# }

# # Hitung jumlah armada ideal
# df["arm roll ideal unit"] = np.ceil((persen_pelayanan_armada["Armroll"] * df["jumlah_produksi_sampah"]) / volume_sampah_yang_diangkut["Armroll"]).astype(int)
# df["truk sampah ideal"] = np.ceil((persen_pelayanan_armada["Compactor Truck"] * df["jumlah_produksi_sampah"]) / volume_sampah_yang_diangkut["Compactor Truck"]).astype(int)
# df["dump truck ideal"] = np.ceil((persen_pelayanan_armada["Dump Truck"] * df["jumlah_produksi_sampah"]) / volume_sampah_yang_diangkut["Dump Truck"]).astype(int)

# # prompt: tolong buatkan agar kode diatas bisa ke bawah syntaxnya bukan menyamping jauh ke kanan

# # Hitung jumlah armada ideal
# df["arm roll ideal unit"] = np.ceil(
#     (persen_pelayanan_armada["Armroll"] * df["jumlah_produksi_sampah"])
#     / volume_sampah_yang_diangkut["Armroll"]
# ).astype(int)
# df["truk sampah ideal"] = np.ceil(
#     (persen_pelayanan_armada["Compactor Truck"] * df["jumlah_produksi_sampah"])
#     / volume_sampah_yang_diangkut["Compactor Truck"]
# ).astype(int)
# df["dump truck ideal"] = np.ceil(
#     (persen_pelayanan_armada["Dump Truck"] * df["jumlah_produksi_sampah"])
#     / volume_sampah_yang_diangkut["Dump Truck"]
# ).astype(int)

# # Hitung total sampah yang bisa diangkut oleh semua armada ideal
# df["jumlah sampah yang ditangani dengan armada yang ideal"] = (
#     df["arm roll ideal unit"] * volume_sampah_yang_diangkut["Armroll"] +
#     df["truk sampah ideal"] * volume_sampah_yang_diangkut["Compactor Truck"] +
#     df["dump truck ideal"] * volume_sampah_yang_diangkut["Dump Truck"]
# )

# # Lihat hasil
# armada_ideal = df[['nama_kabupaten_kota', 'jumlah_produksi_sampah',
#           'arm roll ideal unit', 'truk sampah ideal', 'dump truck ideal',
#           'jumlah sampah yang ditangani dengan armada yang ideal']]

# armada_ideal



# # prompt: tolong buatkan syntax agar hasil dataframe diatas dapat diunduh dalam file excel

# armada_ideal.to_excel("hasil_armada_ideal.xlsx", index=False)



# #persentase sampah yang diangkut dari jumlah sampah yang diproduksi menggunakan armada ideal
# armada_ideal['persentase_diangkut_armada_ideal'] = armada_ideal['jumlah sampah yang ditangani dengan armada yang ideal'] / armada_ideal['jumlah_produksi_sampah'] * 100

# armada_ideal['persentase_diangkut_armada_ideal']

# """# Penggabungan"""

# # Gabungkan dataframe hasil_kmeans dan armada_ideal
# merged_df = pd.merge(hasil_kmeans, armada_ideal, on='nama_kabupaten_kota')

# # Tampilkan hasil gabungan
# merged_df



# gabungan = [
#     "nama_kabupaten_kota",
#     "kepadatan_penduduk",
#     "luas_wilayah",
#     "persentase_sampah_ditangani",
#     "pdrb_adhk_per_kapita",
#     "persentase_pelayanan",
#     "cluster",
#     "arm roll ideal unit",
#     "truk sampah ideal",
#     "dump truck ideal"
# ]


# # Drop columns not in the keep list
# df_gabungan = merged_df[gabungan]

# print(df_gabungan)


# df_gabungan.to_excel("output/gabungan_segmentasi_armada.xlsx", index=False)





######### YANG BARU WAK ####################3


# -*- coding: utf-8 -*-
"""Kodingan Laporan KP

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ldk7dd3y4YKHjiF_-pRrvED2tZdpU9-U
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

dataset = pd.read_excel("/content/data_clustering.xlsx")
dataset.head()

#membuat rata-rata data tahun 2020-2023
import pandas as pd
#Tentukan kolom yang tidak perlu dirata-rata
columns_to_exclude = ['tahun']
#Tentukan kolom pengelompokan (identitas)
group_cols = ['kode_kabupaten_kota', 'nama_kabupaten_kota']
#Pilih kolom numerik yang akan dirata-ratakan
columns_to_average = [col for col in dataset.columns if col not in group_cols + columns_to_exclude]
#Hitung rata-rata per kabupaten/kota
dataset_avg = dataset.groupby(group_cols)[columns_to_average].mean().reset_index()
#Tampilkan 5 baris pertama sebagai preview
dataset_avg.head()

dataset_avg

#drop atau hapus kolom yang tidak digunakan
X = dataset_avg.drop(["kode_kabupaten_kota","nama_kabupaten_kota","jumlah_produksi_sampah","jumlah penduduk"], axis=1)
X.head()

# Ukuran data (kolom, baris)
X.shape

# Cek data missing
X.isnull().sum()

# Ringkasan data
X.describe()

"""K-MEANS CLUSTERING"""

from sklearn.cluster import KMeans

# Berapa cluster-nya
KMeans(n_clusters = 2).fit(X).score(X)

# Penilaian, melihat distribusinya efisien atau tidak
# Menggunakan Score
scr = []

for i in range(1, 15):
    score = KMeans(n_clusters = i, random_state = 14).fit(X).score(X)
    scr.append(round(score, 2))

# Menggunakan Score
plt.plot(range(1, 15), scr)
plt.title("The Score Efficient")
plt.xlabel("Number of Clusters")
plt.ylabel("Score")
plt.show()

# Ambil nilai yang ada di patahannya (belokannya)
# Kira2 ambil cluster = 3

#Elbow Method
wcss = [] # wcss -> Within Cluster Sum of Squares

for i in range(1, 15):
    kmeans = KMeans(n_clusters = i, random_state = 14)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

# Cara lain (menggunakan Elbow Method)
plt.plot(range(1, 15), wcss)
plt.title("The Elbow Method")
plt.xlabel("Number of Clusters")
plt.ylabel("WCSS")
plt.show()

# Pakai cluster = 3
kmeans = KMeans(n_clusters = 3, random_state = 14)
kmeans.fit(X)

# Cara lain untuk melihat hasil cluster
y_pred = kmeans.fit_predict(X)

kmeans.labels_

hasil_kmeans = dataset_avg.copy()
hasil_kmeans['cluster'] = kmeans.labels_
hasil_kmeans

hasil_kmeans.to_excel("output/hasil_kmeans.xlsx", index=False)


hasil_kmeans[['nama_kabupaten_kota', 'cluster']]

cluster_count = hasil_kmeans['cluster'].value_counts().reset_index()
cluster_count.columns = ['Cluster', 'Jumlah Anggota']
cluster_count = cluster_count.sort_values('Cluster')
print(cluster_count)

hasil_kmeans[hasil_kmeans['cluster'] == 0][['nama_kabupaten_kota','cluster']]

hasil_kmeans[hasil_kmeans['cluster'] == 1][['nama_kabupaten_kota','cluster']]

hasil_kmeans[hasil_kmeans['cluster'] == 2][['nama_kabupaten_kota','cluster']]

"""Visualisasi Hasil Clustering (K-Means)"""

cluster_x = hasil_kmeans["cluster"].value_counts().index
cluster_y = hasil_kmeans["cluster"].value_counts().values

sns.barplot(x=cluster_x, y=cluster_y, hue = cluster_x)
plt.title("Frekuensi Data pada Masing-Masing Cluster (KMeans)")
plt.xlabel("Cluster")
plt.ylabel("Frekuensi")
plt.show()

sns.pairplot(hasil_kmeans, hue = "cluster")

# Nilai fitur/variabel dari masing-masing cluster
ann_kmeans0 = hasil_kmeans[hasil_kmeans["cluster"] == 0].iloc[:, 0]
spend_kmeans0 = hasil_kmeans[hasil_kmeans["cluster"] == 0].iloc[:, 1]

ann_kmeans1 = hasil_kmeans[hasil_kmeans["cluster"] == 1].iloc[:, 0]
spend_kmeans1 = hasil_kmeans[hasil_kmeans["cluster"] == 1].iloc[:, 1]

ann_kmeans2 = hasil_kmeans[hasil_kmeans["cluster"] == 2].iloc[:, 0]
spend_kmeans2 = hasil_kmeans[hasil_kmeans["cluster"] == 2].iloc[:, 1]

# Pusat dari cluster (centroid)
centroid_cluster = kmeans.cluster_centers_
centroid_cluster

#visualisasi dengan PCA

from sklearn.decomposition import PCA

# Lakukan PCA ke 2 komponen
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)

# Tambahkan ke dataframe hasil_kmeans
hasil_kmeans['PCA1'] = X_pca[:, 0]
hasil_kmeans['PCA2'] = X_pca[:, 1]

# Visualisasikan hasil cluster
plt.figure(figsize=(8, 6))
colors = ['blue', 'orange', 'green']
for cluster_id in sorted(hasil_kmeans['cluster'].unique()):
    cluster_data = hasil_kmeans[hasil_kmeans['cluster'] == cluster_id]
    plt.scatter(cluster_data['PCA1'], cluster_data['PCA2'],
                s=80, label=f'Cluster {cluster_id}', c=colors[cluster_id])

# Centroid juga ditransformasi ke ruang PCA
centroid_pca = pca.transform(centroid_cluster)
plt.scatter(centroid_pca[:, 0], centroid_pca[:, 1],
            s=160, c='black', label='Centroids', marker='X')

plt.title("Visualisasi Cluster Wilayah (PCA)")
plt.xlabel("PCA 1")
plt.ylabel("PCA 2")
plt.legend()
plt.grid(True)
plt.show()

pd.DataFrame(pca.components_, columns=X.columns, index=['PCA1', 'PCA2'])

"""Karakteristik Tiap Cluster"""

#menggunakan box plot
import seaborn as sns
import matplotlib.pyplot as plt

fitur = ['kepadatan_penduduk', 'pdrb_adhk_per_kapita',
         'persentase_pelayanan', 'persentase_sampah_ditangani',
         'luas_wilayah']

for kolom in fitur:
    plt.figure(figsize=(8, 4))
    sns.boxplot(x='cluster', y=kolom, data=hasil_kmeans, palette='Set2')
    plt.title(f'Distribusi {kolom} per Cluster')
    plt.xlabel('Cluster')
    plt.ylabel(kolom)
    plt.tight_layout()
    plt.show()

#hasil rata rata tiap cluster di setiap variabel
hasil_kmeans.groupby('cluster')[fitur].mean().round(2)

"""Intrepetasi dari setiap cluster

- Cluster 0: kepadatan pddk = tinggi, pdrb = sedang, persentase pelayanan = sedang, persentase sampah ditangani = sedang (tertinggi diantara semua cluster), luas wilayah = kecil

- Cluster 1: kepadatan pddk = rendah, pdrb = kecil, persentase pelayanan = sedang, persentase sampah ditangani = sedang (terkecil diantara semua cluster), luas wilayah = tinggi

- Cluster 2: kepadatan pddk = tinggi, pdrb = tinggi, persentase pelayanan = sedang, persentase sampah ditangani = sedang, luas wilayah = sedang

Rekomendasi Solusi untuk Cluster
"""

# # Ambil rata-rata per cluster
# mean_per_cluster = hasil_kmeans.groupby("cluster")[[
#     "kepadatan_penduduk",
#     "pdrb_adhk_per_kapita",
#     "persentase_pelayanan",
#     "persentase_sampah_ditangani",
#     "luas_wilayah"
# ]].mean()

# # Simpan deskripsi solusi
# solusi_clusters = {}

# # Untuk tiap cluster
# for cluster_id, row in mean_per_cluster.iterrows():
#     solusi = f"ðŸ”· Rekomendasi untuk Cluster {cluster_id}:\n"

#     # Karakteristik umum
#     if row['kepadatan_penduduk'] > mean_per_cluster['kepadatan_penduduk'].mean():
#         solusi += "- Wilayah padat penduduk. Tingkatkan efisiensi armada dan pengumpulan sampah.\n"
#     else:
#         solusi += "- Kepadatan rendah. Fokus pada aksesibilitas layanan di area luas.\n"

#     if row['pdrb_adhk_per_kapita'] > mean_per_cluster['pdrb_adhk_per_kapita'].mean():
#         solusi += "- Ekonomi wilayah tinggi. Dorong kebijakan pengelolaan sampah berbasis teknologi & industri daur ulang.\n"
#     else:
#         solusi += "- Ekonomi wilayah masih rendah. Berikan dukungan anggaran dan penyuluhan masyarakat.\n"

#     if row['persentase_pelayanan'] < 75:
#         solusi += "- Pelayanan sampah masih rendah. Perluasan cakupan layanan harus menjadi prioritas.\n"
#     else:
#         solusi += "- Pelayanan sampah cukup baik. Fokus pada peningkatan kualitas pelayanan.\n"

#     if row['persentase_sampah_ditangani'] < 0.4:
#         solusi += "- Penanganan sampah belum optimal. Investasi infrastruktur TPS/TPA ramah lingkungan diperlukan.\n"
#     else:
#         solusi += "- Penanganan sampah cukup baik. Lanjutkan dengan penguatan program daur ulang dan edukasi warga.\n"

#     if row['luas_wilayah'] > mean_per_cluster['luas_wilayah'].mean():
#         solusi += "- Wilayah luas. Gunakan teknologi seperti GPS dan pemetaan untuk perencanaan pengangkutan.\n"
#     else:
#         solusi += "- Wilayah kecil. Penjadwalan pengangkutan bisa dibuat lebih sering dan fleksibel.\n"

#     solusi_clusters[cluster_id] = solusi

# # Tampilkan rekomendasi untuk semua cluster
# for cluster, rekomendasi in solusi_clusters.items():
#     print(rekomendasi)
#     print("-" * 60)

# Rekomendasi berbasis interpretasi langsung
solusi_clusters = {
    0: """ðŸ”· Rekomendasi untuk Cluster 0:
- Wilayah padat penduduk dengan luas kecil â†’ Optimalkan rute pengangkutan dan frekuensi layanan.
- Ekonomi sedang â†’ Perkuat peran swasta/UMKM dalam pengelolaan sampah sehingga penanganan sampah meningkat
- Pelayanan dan penanganan sampah sedang â†’ Menambah jumlah TPS eksisting di lokasi strategis serta pemberian edukasi kepada warga agar lebih aktif memilah sampah.
""",

    1: """ðŸ”· Rekomendasi untuk Cluster 1:
- Wilayah luas dan berpenduduk jarang â†’ Fokus pada penyediaan akses layanan ke pelosok dengan sistem zona.
- Ekonomi rendah â†’ Melakukan intervensi dana pemerintah untuk infrastruktur dasar pengelolaan sampah.
- Pelayanan dan penanganan sampah sedang â†’ Menambah jumlah TPS eksisting di lokasi strategis serta pemberian edukasi kepada masyarakat melalui edukasi dan program insentif.
""",

    2: """ðŸ”· Rekomendasi untuk Cluster 2:
- Wilayah padat penduduk dan luas wilayah sedang â†’ Optimalkan rute pengangkutan sampah dengan teknologi (misalnya, aplikasi tracking armada atau GPS).
- Ekonomi tinggi â†’ Implementasi teknologi pintar dalam pengangkutan dan pemantauan sampah.
- Pelayanan dan penanganan sampah sedang â†’ Membuat jadwal angkut berbasis zona yang efisien dan transparan serta digitalisasi layanan kebersihan seperti aplikasi pelaporan warga
"""
}

# Cetak rekomendasi untuk semua cluster
for cluster, rekomendasi in solusi_clusters.items():
    print(rekomendasi)
    print("-" * 60)



"""# JUMLAH ARMADA IDEAL

"""



import pandas as pd
import numpy as np

df = pd.read_excel("/content/Armada Ideal.xlsx")
df.head()

# prompt: menghapus data agar yang ditampilkan atau digunakan di df adalaha "Tahun" = 2023

df = df[df['Tahun'] == 2023].copy()

# Ukuran data (kolom, baris)
df.shape

# Cek data missing
df.isnull().sum()

# Ringkasan data
df.describe()

# Ubah kolom numerik menjadi float
numeric_cols = [
    'jumlah_produksi_sampah',
    'jumlah sampah yang ditangani',
    'Armroll',
    'Truk Sampah',
    'Dumptruck'
]
df[numeric_cols] = df[numeric_cols].astype(float)

df

"""Analisis Jumlah Armada Ideal"""

# Parameter Menghitung Volume Timbulan Sampah
#yang Mampu Diangkut Tiap Armada (ton/hari/unit)

kapasitas_armada = 10

densitas_sampah ={
    "Armroll": 0.75,
    "Compactor Truck": 0.75,
    "Dump Truck": 0.45
}

ritasi_per_hari = 3


# kapasitas = {
#     "Armroll": 22.5,
#     "Compactor Truck": 22.5,
#     "Dump Truck": 13.5
# }

persen_pelayanan_armada = {
    "Armroll": 0.25,
    "Compactor Truck": 0.35,
    "Dump Truck": 0.40
}

# Hitung volume sampah yang mampu diangkut tiap jenis armada (ton/hari/unit)
volume_sampah_yang_diangkut = {
    jenis: kapasitas_armada * densitas * ritasi_per_hari
    for jenis, densitas in densitas_sampah.items()
}

# Hitung jumlah armada ideal
df["arm roll ideal unit"] = np.ceil((persen_pelayanan_armada["Armroll"] * df["jumlah_produksi_sampah"]) / volume_sampah_yang_diangkut["Armroll"]).astype(int)
df["truk sampah ideal"] = np.ceil((persen_pelayanan_armada["Compactor Truck"] * df["jumlah_produksi_sampah"]) / volume_sampah_yang_diangkut["Compactor Truck"]).astype(int)
df["dump truck ideal"] = np.ceil((persen_pelayanan_armada["Dump Truck"] * df["jumlah_produksi_sampah"]) / volume_sampah_yang_diangkut["Dump Truck"]).astype(int)

# prompt: tolong buatkan agar kode diatas bisa ke bawah syntaxnya bukan menyamping jauh ke kanan

# Hitung jumlah armada ideal
df["arm roll ideal unit"] = np.ceil(
    (persen_pelayanan_armada["Armroll"] * df["jumlah_produksi_sampah"])
    / volume_sampah_yang_diangkut["Armroll"]
).astype(int)
df["truk sampah ideal"] = np.ceil(
    (persen_pelayanan_armada["Compactor Truck"] * df["jumlah_produksi_sampah"])
    / volume_sampah_yang_diangkut["Compactor Truck"]
).astype(int)
df["dump truck ideal"] = np.ceil(
    (persen_pelayanan_armada["Dump Truck"] * df["jumlah_produksi_sampah"])
    / volume_sampah_yang_diangkut["Dump Truck"]
).astype(int)

# Hitung total sampah yang bisa diangkut oleh semua armada ideal
df["jumlah sampah yang ditangani dengan armada yang ideal"] = (
    df["arm roll ideal unit"] * volume_sampah_yang_diangkut["Armroll"] +
    df["truk sampah ideal"] * volume_sampah_yang_diangkut["Compactor Truck"] +
    df["dump truck ideal"] * volume_sampah_yang_diangkut["Dump Truck"]
)

# Lihat hasil
armada_ideal = df[['nama_kabupaten_kota', 'jumlah_produksi_sampah',
          'arm roll ideal unit', 'truk sampah ideal', 'dump truck ideal',
          'jumlah sampah yang ditangani dengan armada yang ideal']]

armada_ideal



# prompt: tolong buatkan syntax agar hasil dataframe diatas dapat diunduh dalam file excel

armada_ideal.to_excel("hasil_armada_ideal.xlsx", index=False)



#persentase sampah yang diangkut dari jumlah sampah yang diproduksi menggunakan armada ideal
armada_ideal['persentase_diangkut_armada_ideal'] = armada_ideal['jumlah sampah yang ditangani dengan armada yang ideal'] / armada_ideal['jumlah_produksi_sampah'] * 100

armada_ideal['persentase_diangkut_armada_ideal']

"""# Penggabungan"""

# Gabungkan dataframe hasil_kmeans dan armada_ideal
merged_df = pd.merge(hasil_kmeans, armada_ideal, on='nama_kabupaten_kota')

# Tampilkan hasil gabungan
merged_df



gabungan = [
    'nama_kabupaten_kota',
    'kepadatan_penduduk',
    'luas_wilayah',
    'cluster',
    'arm roll ideal unit',
    'truk sampah ideal',
    'dump truck ideal'
]

# Drop columns not in the keep list
df_gabungan = merged_df[gabungan]

display(df_gabungan)

klaster_0 = df_gabungan[df_gabungan['cluster'] == 0]
klaster_0



#Rata-rata Jumlah Armada Ideal cluster 0

# Hitung rata-rata per jenis armada
rata_rata_0 = {
    'Arm Roll': round(klaster_0['arm roll ideal unit'].mean()),
    'Truk Sampah': round(klaster_0['truk sampah ideal'].mean()),
    'Dump Truck': round(klaster_0['dump truck ideal'].mean())
}

# Konversi ke DataFrame untuk visualisasi
df_rata_0 = pd.DataFrame(list(rata_rata_0.items()), columns=['Jenis Armada', 'Rata-rata Unit'])

# Plot column chart
plt.figure(figsize=(8, 6))
plt.bar(df_rata_0['Jenis Armada'], df_rata_0['Rata-rata Unit'], color=['#4CAF50', '#2196F3', '#FF9800'])

plt.title('Rata-rata Jumlah Armada Ideal per Jenis (Cluster 0)')
plt.xlabel('Jenis Armada')
plt.ylabel('Rata-rata Jumlah Unit')
plt.ylim(0, max(df_rata_0['Rata-rata Unit']) + 1)

# Tambahkan label nilai di atas bar
for idx, val in enumerate(df_rata_0['Rata-rata Unit']):
    plt.text(idx, val + 0.1, f'{val:.2f}', ha='center', va='bottom')

plt.tight_layout()
plt.show()

klaster_1 = df_gabungan[df_gabungan['cluster'] == 1]
klaster_1

#Rata-rata Jumlah Armada Ideal cluster 1

# Hitung rata-rata per jenis armada
rata_rata_1 = {
    'Arm Roll': round(klaster_1['arm roll ideal unit'].mean()),
    'Truk Sampah': round(klaster_1['truk sampah ideal'].mean()),
    'Dump Truck': round(klaster_1['dump truck ideal'].mean())
}

# Konversi ke DataFrame untuk visualisasi
df_rata_1 = pd.DataFrame(list(rata_rata_1.items()), columns=['Jenis Armada', 'Rata-rata Unit'])

# Plot column chart
plt.figure(figsize=(8, 6))
plt.bar(df_rata_1['Jenis Armada'], df_rata_1['Rata-rata Unit'], color=['#4CAF50', '#2196F3', '#FF9800'])

plt.title('Rata-rata Jumlah Armada Ideal per Jenis (Cluster 1)')
plt.xlabel('Jenis Armada')
plt.ylabel('Rata-rata Jumlah Unit')
plt.ylim(0, max(df_rata_1['Rata-rata Unit']) + 1)

# Tambahkan label nilai di atas bar
for idx, val in enumerate(df_rata_1['Rata-rata Unit']):
    plt.text(idx, val + 0.1, f'{val:.2f}', ha='center', va='bottom')

plt.tight_layout()
plt.show()

klaster_2 = df_gabungan[df_gabungan['cluster'] == 2]
klaster_2

#Rata-rata Jumlah Armada Ideal cluster 2

# Hitung rata-rata per jenis armada
rata_rata_2 = {
    'Arm Roll': round(klaster_2['arm roll ideal unit'].mean()),
    'Truk Sampah': round(klaster_2['truk sampah ideal'].mean()),
    'Dump Truck': round(klaster_2['dump truck ideal'].mean())
}

# Konversi ke DataFrame untuk visualisasi
df_rata_2 = pd.DataFrame(list(rata_rata_2.items()), columns=['Jenis Armada', 'Rata-rata Unit'])

# Plot column chart
plt.figure(figsize=(8, 6))
plt.bar(df_rata_2['Jenis Armada'], df_rata_2['Rata-rata Unit'], color=['#4CAF50', '#2196F3', '#FF9800'])

plt.title('Rata-rata Jumlah Armada Ideal per Jenis (Cluster 2)')
plt.xlabel('Jenis Armada')
plt.ylabel('Rata-rata Jumlah Unit')
plt.ylim(0, max(df_rata_2['Rata-rata Unit']) + 1)

# Tambahkan label nilai di atas bar
for idx, val in enumerate(df_rata_2['Rata-rata Unit']):
    plt.text(idx, val + 0.1, f'{val:.2f}', ha='center', va='bottom')

plt.tight_layout()
plt.show()

df_gabungan.to_excel("gabungan_segmentasi_armada.xlsx", index=False)

# Ambil rata-rata per cluster
mean_per_cluster = hasil_kmeans.groupby("cluster")[[
    "kepadatan_penduduk",
    "pdrb_adhk_per_kapita",
    "persentase_pelayanan",
    "persentase_sampah_ditangani",
    "luas_wilayah"
]].mean()

# Simpan deskripsi solusi
solusi_clusters = {}

# Untuk tiap cluster
for cluster_id, row in mean_per_cluster.iterrows():
    solusi = f"ðŸ”· Rekomendasi untuk Cluster {cluster_id}:\n"

    # Karakteristik umum
    if row['kepadatan_penduduk'] > mean_per_cluster['kepadatan_penduduk'].mean():
        solusi += "- Wilayah padat penduduk. Tingkatkan efisiensi armada dan pengumpulan sampah.\n"
    else:
        solusi += "- Kepadatan rendah. Fokus pada aksesibilitas layanan di area luas.\n"

    if row['pdrb_adhk_per_kapita'] > mean_per_cluster['pdrb_adhk_per_kapita'].mean():
        solusi += "- Ekonomi wilayah tinggi. Dorong kebijakan pengelolaan sampah berbasis teknologi & industri daur ulang.\n"
    else:
        solusi += "- Ekonomi wilayah masih rendah. Berikan dukungan anggaran dan penyuluhan masyarakat.\n"

    if row['persentase_pelayanan'] < 75:
        solusi += "- Pelayanan sampah masih rendah. Perluasan cakupan layanan harus menjadi prioritas.\n"
    else:
        solusi += "- Pelayanan sampah cukup baik. Fokus pada peningkatan kualitas pelayanan.\n"

    if row['persentase_sampah_ditangani'] < 0.4:
        solusi += "- Penanganan sampah belum optimal. Investasi infrastruktur TPS/TPA ramah lingkungan diperlukan.\n"
    else:
        solusi += "- Penanganan sampah cukup baik. Lanjutkan dengan penguatan program daur ulang dan edukasi warga.\n"

    if row['luas_wilayah'] > mean_per_cluster['luas_wilayah'].mean():
        solusi += "- Wilayah luas. Gunakan teknologi seperti GPS dan pemetaan untuk perencanaan pengangkutan.\n"
    else:
        solusi += "- Wilayah kecil. Penjadwalan pengangkutan bisa dibuat lebih sering dan fleksibel.\n"

    solusi_clusters[cluster_id] = solusi

# Tampilkan rekomendasi untuk semua cluster
for cluster, rekomendasi in solusi_clusters.items():
    print(rekomendasi)
    print("-" * 60)

